/*
===========================================================================

Doom 3 BFG Edition GPL Source Code
Copyright (C) 1993-2012 id Software LLC, a ZeniMax Media company. 

This file is part of the Doom 3 BFG Edition GPL Source Code ("Doom 3 BFG Edition Source Code").  

Doom 3 BFG Edition Source Code is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Doom 3 BFG Edition Source Code is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Doom 3 BFG Edition Source Code.  If not, see <http://www.gnu.org/licenses/>.

In addition, the Doom 3 BFG Edition Source Code is also subject to certain additional terms. You should have received a copy of these additional terms immediately following the terms and conditions of the GNU General Public License which accompanied the Doom 3 BFG Edition Source Code.  If not, please request a copy in writing from id Software at the address below.

If you have questions concerning this license or the applicable additional terms, you may contact in writing id Software LLC, c/o ZeniMax Media Inc., Suite 120, Rockville, Maryland 20850 USA.

===========================================================================
*/

#include "global.inc"

#ifdef ID_GPU_SKIN
	uniform matrices_ubo { float4 matrices[408]; };
#endif

struct VS_IN {
	float4 position : POSITION;
	float2 texcoord : TEXCOORD0;
	float4 normal : NORMAL;
	float4 tangent : TANGENT;
	float4 color : COLOR0;
};

struct VS_OUT {
	float4 position		: POSITION;
	float4 texcoord0	: TEXCOORD0;
	float4 texcoord1	: TEXCOORD1;
	float4 texcoord2	: TEXCOORD2;
	float4 texcoord3	: TEXCOORD3;
	float4 texcoord4	: TEXCOORD4;
	float4 texcoord5	: TEXCOORD5;
	float4 texcoord6	: TEXCOORD6;
	float4 texcoord7	: TEXCOORD7;
	float4 color		: COLOR0;
};

void main( VS_IN vertex, out VS_OUT result ) {
#ifdef ID_GPU_SKIN
	float4 vModelNormal = vertex.normal * 2.0 - 1.0;
	float4 vModelTangent = vertex.tangent * 2.0 - 1.0;
	float3 vModelBinormal = cross( vModelNormal.xyz, vModelTangent.xyz ) * vModelTangent.w;

	//--------------------------------------------------------------
	// GPU transformation of the normal / binormal / bitangent
	//
	// multiplying with 255.1 give us the same result and is faster than floor( w * 255 + 0.5 )
	//--------------------------------------------------------------
	const float w0 = vertex.color.x;
	const float w1 = vertex.color.y;
	const float w2 = vertex.color.z;
	const float w3 = vertex.color.w;

	float4 matX, matY, matZ;	// must be float4 for vec4
	float joint = vertex.color.x * 255.1 * 3;
	matX = matrices[int(joint+0)] * w0;
	matY = matrices[int(joint+1)] * w0;
	matZ = matrices[int(joint+2)] * w0;

	joint = vertex.color.y * 255.1 * 3;
	matX += matrices[int(joint+0)] * w1;
	matY += matrices[int(joint+1)] * w1;
	matZ += matrices[int(joint+2)] * w1;

	joint = vertex.color.z * 255.1 * 3;
	matX += matrices[int(joint+0)] * w2;
	matY += matrices[int(joint+1)] * w2;
	matZ += matrices[int(joint+2)] * w2;

	joint = vertex.color.w * 255.1 * 3;
	matX += matrices[int(joint+0)] * w3;
	matY += matrices[int(joint+1)] * w3;
	matZ += matrices[int(joint+2)] * w3;

	float3 vNormal;
	vNormal.x = dot3( matX, vModelNormal );
	vNormal.y = dot3( matY, vModelNormal );
	vNormal.z = dot3( matZ, vModelNormal );
	vNormal = normalize( vNormal );

	float3 vTangent;
	vTangent.x = dot3( matX, vModelTangent );
	vTangent.y = dot3( matY, vModelTangent );
	vTangent.z = dot3( matZ, vModelTangent );
	vTangent = normalize( vTangent );

	float3 vBinormal;
	vBinormal.x = dot3( matX, vModelBinormal );
	vBinormal.y = dot3( matY, vModelBinormal );
	vBinormal.z = dot3( matZ, vModelBinormal );
	vBinormal = normalize( vBinormal );

	float4 vertex_position;
	vertex_position.x = dot4( matX, vertex.position );
	vertex_position.y = dot4( matY, vertex.position );
	vertex_position.z = dot4( matZ, vertex.position );
	vertex_position.w = 1.0;
#else
	float3 vNormal = vertex.normal.xyz;
	float4 vTangent = vertex.tangent;
	
	float sign = -1;
	if(vertex.color[3] != 0)
		sign = 1;
		
	float3 vBinormal = cross( vNormal.xyz, vTangent.xyz ) * sign;	
	float4 vertex_position = vertex.position;
#endif


	result.position.x = dot4( vertex_position, rpMVPmatrixX );
	result.position.y = dot4( vertex_position, rpMVPmatrixY );
	result.position.z = dot4( vertex_position, rpMVPmatrixZ );
	result.position.w = dot4( vertex_position, rpMVPmatrixW );

	float4 defaultTexCoord = float4( 0.0f, 0.5f, 0.0f, 1.0f );

	//calculate vector to light in R0
	float4 toLight = float4(rpLocalLightOrigin.xyz, 0) - vertex_position;

	//result.texcoord0   
	result.texcoord0.x = dot3( vTangent.xyz, toLight );
	result.texcoord0.y = dot3( vBinormal, toLight );
	result.texcoord0.z = dot3( vNormal, toLight );
	result.texcoord0.w = 1.0f;

	//textures 1 takes the base coordinates by the texture matrix
	result.texcoord1 = defaultTexCoord;
	result.texcoord1.x = dot4( vertex.texcoord.xy, rpBumpMatrixS );
	result.texcoord1.y = dot4( vertex.texcoord.xy, rpBumpMatrixT );

	//result.texcoord5.xyz = vertex_position.xyz;
	float4 modelVertex;
	modelVertex.x = dot4( vertex_position, rpModelMatrixX );
	modelVertex.y = dot4( vertex_position, rpModelMatrixY );
	modelVertex.z = dot4( vertex_position, rpModelMatrixZ );
	modelVertex.w = dot4( vertex_position, rpModelMatrixW );
	
	
	result.texcoord5.x = modelVertex.x;
	result.texcoord5.y = modelVertex.y;
	result.texcoord5.z = modelVertex.z;
    result.texcoord5.w = modelVertex.w;
	
	//# texture 2 has one texgen
	result.texcoord2 = defaultTexCoord;
	result.texcoord2.x = dot4( vertex_position, rpLightFalloffS );

	//# texture 3 has three texgens
	result.texcoord3.x = dot4( vertex_position, rpLightProjectionS );
	result.texcoord3.y = dot4( vertex_position, rpLightProjectionT );
	result.texcoord3.z = 0.0f;
	result.texcoord3.w = dot4( vertex_position, rpLightProjectionQ );

	//# textures 4 takes the base coordinates by the texture matrix
	result.texcoord4 = defaultTexCoord;
	result.texcoord4.x = dot4( vertex.texcoord.xy, rpDiffuseMatrixS );
	result.texcoord4.y = dot4( vertex.texcoord.xy, rpDiffuseMatrixT );

	//# textures 5 takes the base coordinates by the texture matrix
	result.texcoord4.z = dot4( vertex.texcoord.xy, rpSpecularMatrixS );
	result.texcoord4.w = dot4( vertex.texcoord.xy, rpSpecularMatrixT );
	

	//# texture 6's texcoords will be the halfangle in texture space

	//# calculate normalized vector to light in R0
	toLight = normalize( toLight );

	//# calculate normalized vector to viewer in R1
	float4 toView = normalize( rpLocalViewOrigin - modelVertex );
	
	//# add together to become the half angle vector in object space (non-normalized)
	float4 halfAngleVector = toLight + toView;

	//# put into texture space
	result.texcoord6.x = dot3( vTangent.xyz, halfAngleVector );
	result.texcoord6.y = dot3( vBinormal, halfAngleVector );
	result.texcoord6.z = dot3( vNormal, halfAngleVector );
	result.texcoord6.w = 1.0f;
	
	result.texcoord7.x = dot3( vTangent.xyz, toView );
	result.texcoord7.y = dot3( vBinormal, toView );
	result.texcoord7.z = dot3( vNormal, toView );
	result.texcoord7.w = 1.0f;

	//# generate the vertex color, which can be 1.0, color, or 1.0 - color
	//# for 1.0 : env[16] = 0, env[17] = 1
	//# for color : env[16] = 1, env[17] = 0
	//# for 1.0-color : env[16] = -1, env[17] = 1	
	result.color = ( swizzleColor( vertex.color ) * rpVertexColorModulate ) + rpVertexColorAdd;
}