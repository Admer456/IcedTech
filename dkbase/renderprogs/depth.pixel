/*
===========================================================================

Doom 3 BFG Edition GPL Source Code
Copyright (C) 1993-2012 id Software LLC, a ZeniMax Media company. 

This file is part of the Doom 3 BFG Edition GPL Source Code ("Doom 3 BFG Edition Source Code").  

Doom 3 BFG Edition Source Code is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Doom 3 BFG Edition Source Code is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Doom 3 BFG Edition Source Code.  If not, see <http://www.gnu.org/licenses/>.

In addition, the Doom 3 BFG Edition Source Code is also subject to certain additional terms. You should have received a copy of these additional terms immediately following the terms and conditions of the GNU General Public License which accompanied the Doom 3 BFG Edition Source Code.  If not, please request a copy in writing from id Software at the address below.

If you have questions concerning this license or the applicable additional terms, you may contact in writing id Software LLC, c/o ZeniMax Media Inc., Suite 120, Rockville, Maryland 20850 USA.

===========================================================================
*/

#include "global.inc"

uniform sampler2D samp0 : register(s0);
uniform sampler2D samp1 : register(s1); // Emissive

struct PS_IN {
	float4 position  : VPOS;
	float4 texcoord0 : TEXCOORD0_centroid;
	float4 texcoord1 : TEXCOORD1_centroid;
};

struct PS_OUT {
	half4 color : COLOR;
	half4 color1 : COLOR1; 
	half4 color2 : COLOR2;
};

void main( PS_IN fragment, out PS_OUT result ) {
	float2 st = fragment.texcoord0.xy;
//#ifdef ID_GPU_SKIN
	st.y = 1.0 - st.y;
//#endif
	float4 emissive = tex2D( samp1, st );
	float2 normal = encodeNormal(fragment.texcoord1.xyz);

	result.color = float4( 0.0, 0.0, 0.0, 1.0 );
	result.color1 = float4(emissive.x, emissive.y, emissive.z, 1.0);
	result.color2 = float4(normal.x, normal.y, 0.0, 1.0);
}